{"version":3,"sources":["../../../src/lottieAnimationView.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAsB,MAAA,EAAQ,YAAA,EAAc,SAAA,EAAuB,WAAA,EAAa,MAAA,EAAO,MAAO,eAAA,CAAgB;AAClI,OAAO,EAAE,gBAAA,EAAiB,MAAO,iBAAA,CAAkB;AAGnD,IAAM,MAAA,GAAc,OAAA,CAAQ,mCAAC,CAAmC,CAAC;AAIjE;IAEI,sCAAqB,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;QAMtC,gBAAW,GAAQ,IAAI,YAAY,EAAE,CAAC;IANG,CAAC;IAc3C,sDAAe,GAAf;QAEI,EAAE,CAAA,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA,CAAC;YAAA,MAAM,CAAC;QAAA,CAAC;QAE9C,IAAI,CAAC,QAAQ,GAAG;YACZ,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa;YAC1C,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,KAAK;YACxC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK;YACjC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK;YACzC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,KAAK,KAAK;YACzD,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;YAC7B,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,EAAE;SACxD,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,MAAM,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,MAAM,CAAC;QAE/C,IAAI,IAAI,GAAQ,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAoBL,mCAAC;AAAD,CAxDA,AAwDC;;AAnBM,uCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,wKAEQ;aACrB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2CAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;CACzE,EAF6F,CAE7F,CAAC;AACK,2CAAc,GAA2C;IAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;CAC/D,CAAC","file":"lottieAnimationView.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, AfterViewInit, Output, EventEmitter, ViewChild, ElementRef, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\ndeclare let require: any;\r\nconst lottie: any = require('lottie-web/build/player/lottie.js');\r\n\r\n\r\n\r\nexport class LottieAnimationViewComponent implements AfterViewInit {\r\n    \r\n    constructor( private platformId: string) {}\r\n\r\n     options: any;\r\n     width: number;\r\n     height: number;\r\n\r\n     animCreated: any = new EventEmitter();\r\n\r\n     lavContainer: ElementRef;\r\n\r\n    public viewWidth: string;\r\n    public viewHeight: string;\r\n    private _options: any;\r\n\r\n    ngAfterViewInit() {\r\n        \r\n        if(isPlatformServer(this.platformId)){return;}\r\n        \r\n        this._options = {\r\n            container: this.lavContainer.nativeElement,\r\n            renderer: this.options.renderer || 'svg',\r\n            loop: this.options.loop !== false,\r\n            autoplay: this.options.autoplay !== false,\r\n            autoloadSegments: this.options.autoloadSegments !== false,\r\n            animationData: this.options.animationData,\r\n            path: this.options.path || '',\r\n            rendererSettings: this.options.rendererSettings || {}\r\n        };\r\n\r\n        this.viewWidth = this.width + 'px' || '100%';\r\n        this.viewHeight = this.height + 'px' || '100%';\r\n\r\n        let anim: any = lottie.loadAnimation(this._options);\r\n        this.animCreated.emit(anim);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'lottie-animation-view',\r\n    template: `<div #lavContainer \r\n                    [ngStyle]=\"{'width': viewWidth, 'height': viewHeight, 'overflow':'hidden', 'margin': '0 auto'}\">    \r\n               </div>`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'animCreated': [{ type: Output },],\n'lavContainer': [{ type: ViewChild, args: ['lavContainer', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}